{"bean": {
   "nonvisualchildren": {"bean": [{
      "@parent": "",
      "@depth": 0,
      "@type": "DataSourceBean",
      "property": [
         {
            "@value": "a",
            "@type": "dataTheme",
            "@path": "dataTheme"
         },
         {
            "@changed": false,
            "@value": "reverseGeocode1",
            "@type": "name",
            "@path": "name"
         },
         {
            "@changed": true,
            "@value": 17738720,
            "@type": "string",
            "@path": "service"
         },
         {
            "@changed": true,
            "@value": [],
            "@type": "string",
            "@path": "outputMapping"
         },
         {
            "@changed": true,
            "@value": [],
            "@type": "string",
            "@path": "inputMapping"
         },
         {
            "@changed": false,
            "@value": {"entries": ""},
            "@type": "string",
            "@path": "jsEntries"
         },
         {
            "@changed": true,
            "@value": 0,
            "@type": "number",
            "@path": "index"
         }
      ],
      "@id": "23207767-A0DD-623A-F16D-6DA55DDE4AFE",
      "events": {
         "onsuccess": {
            "@id": "SuccessEventC80CFD9E-D80E-5993-29BF-CCE230E6B56D",
            "@readOnly": "false",
            "actions": {"mapping": {
               "mappings": [],
               "@index": 0,
               "@id": "MappingD373A2E8-6C83-0ACC-D74B-E0822AEB3C3E",
               "points": {
                  "component": [],
                  "service": [],
                  "storage": []
               }
            }}
         },
         "onbeforesend": {
            "@id": "BeforeSendA75170AF-C9AE-0018-BF5A-D8A9BA13E1BD",
            "@readOnly": "false",
            "actions": {"mapping": {
               "mappings": [],
               "@index": 0,
               "@id": "Mapping8AE957E5-4BA7-DA37-C60A-39BA5FFBED60",
               "points": {
                  "component": [],
                  "service": [],
                  "storage": []
               }
            }}
         }
      }
   }]},
   "controller": {
      "dependency": {
         "internal": [
            "4E21F3C5-F88D-FF7E-651D-890586DC1E1C",
            "DF5E8686-8E0D-AE2F-1B79-C0624AB6D061"
         ],
         "custom": [
            {
               "path": "@ionic-native/native-geocoder/ngx",
               "name": "{NativeGeocoder}",
               "id": "B7D02720-095F-C5FA-F5DE-E47B085C217F"
            },
            {
               "path": "@ionic-native/native-geocoder/ngx",
               "name": "{NativeGeocoderResult}",
               "id": "E359D6A1-2C09-5BF9-C7CD-06A5F31A40CA"
            },
            {
               "path": "@ionic-native/native-geocoder/ngx",
               "name": "{NativeGeocoderOptions}",
               "id": "CA74B56D-F8D8-FDE6-3EF4-72DBFC20F547"
            },
            {
               "path": "@ionic-native/file-path/ngx",
               "name": "{FilePath}",
               "id": "29413D9E-4828-DCD9-A5D0-2BBBCD8E6032"
            },
            {
               "path": "@ionic-native/chooser/ngx",
               "name": "{Chooser}",
               "id": "4D62DE04-9F37-8EB9-F861-B28DDA046752"
            }
         ]
      },
      "scss": ".spinner {\n    stroke: #ff0000;\n    fill: #8b0000;\n    position: fixed;\n    z-index: 999;\n    height: 5em;\n    width: em;\n    overflow: show;\n    margin: auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n}\n\nion-spinner * {\n    stroke: #ff0000;\n    fill: #8b0000;\n    position: fixed;\n    z-index: 999;\n    height: 5em;\n    width: em;\n    overflow: show;\n    margin: auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n  }\n  \nion-card-content div {\n    color: black;\n}\n\nion-card-content div h1, ion-card-content div h2{\n    margin-top: revert;\n}\n\nion-card-content div p {\n    margin-top: bottom;\n}",
      "function": [
         {
            "argument": [],
            "name": "uuidv4",
            "id": "426A0A62-CC2A-4852-A3E8-D899EEADC0ED",
            "body": "return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n",
            "type": "method"
         },
         {
            "argument": ["time"],
            "name": "DELETEMEto24hr",
            "id": "D3D74715-64B3-4DE6-8749-A3C81C07D3D0",
            "body": "//convert a 12hr time with am/pm to 24 hours\n//https://stackoverflow.com/questions/15083548/convert-12-hour-hhmm-am-pm-to-24-hour-hhmm\nconst d = new Date(\"1/1/2013 \" + time); \nreturn d.getHours().toString().padStart(2, '0') + ':' + d.getMinutes().toString().padStart(2, '0');",
            "type": "method"
         },
         {
            "argument": ["d"],
            "name": "DELETEMEtoDateString",
            "id": "D9551423-C6DE-4FB0-88EA-50028BE91657",
            "body": "//Convert to IOS string but using the local TZ\n//https://stackoverflow.com/questions/23593052/format-javascript-date-as-yyyy-mm-dd\nvar date = new Date(d);\nvar dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 ))\n                    .toISOString()\n                    .split(\"T\")[0];\nreturn dateString",
            "type": "method"
         },
         {
            "argument": [],
            "name": "",
            "id": "D2ACC916-82DC-4330-84FA-C036DC67636A",
            "body": "//https://github.com/Turbo87/igc-parser/blob/master/index.ts\n//const lookupManufacturer = require('flight-recorder-manufacturers/lookup');\n\nconst ONE_HOUR = 60 * 60 * 1000;\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/* tslint:disable:max-line-length */\nconst RE_A = /^A(\\w{3})(\\w{3,}?)(?:FLIGHT:(\\d+)|\\:(.+))?$/;\nconst RE_HFDTE = /^HFDTE(?:DATE:)?(\\d{2})(\\d{2})(\\d{2})(?:,?(\\d{2}))?/;\nconst RE_PLT_HEADER = /^H[FOP]PLT(?:.{0,}?:(.*)|(.*))$/;\nconst RE_CM2_HEADER = /^H[FOP]CM2(?:.{0,}?:(.*)|(.*))$/; // P is used by some broken Flarms\nconst RE_GTY_HEADER = /^H[FOP]GTY(?:.{0,}?:(.*)|(.*))$/;\nconst RE_GID_HEADER = /^H[FOP]GID(?:.{0,}?:(.*)|(.*))$/;\nconst RE_CID_HEADER = /^H[FOP]CID(?:.{0,}?:(.*)|(.*))$/;\nconst RE_CCL_HEADER = /^H[FOPS]CCL(?:.{0,}?:(.*)|(.*))$/; //Skydrop uses HS no HF\nconst RE_FTY_HEADER = /^H[FOP]FTY(?:.{0,}?:(.*)|(.*))$/;\nconst RE_RFW_HEADER = /^H[FOP]RFW(?:.{0,}?:(.*)|(.*))$/;\nconst RE_RHW_HEADER = /^H[FOP]RHW(?:.{0,}?:(.*)|(.*))$/;\nconst RE_B = /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{3})([NS])(\\d{3})(\\d{2})(\\d{3})([EW])([AV])(-\\d{4}|\\d{5})(-\\d{4}|\\d{5})/;\nconst RE_K = /^K(\\d{2})(\\d{2})(\\d{2})/;\nconst RE_IJ = /^[IJ](\\d{2})(?:\\d{2}\\d{2}[A-Z]{3})+/;\nconst RE_TASK = /^C(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{4})([-\\d]{2})(.*)/;\nconst RE_TASKPOINT = /^C(\\d{2})(\\d{2})(\\d{3})([NS])(\\d{3})(\\d{2})(\\d{3})([EW])(.*)/;\n/* tslint:enable:max-line-length */\n\ndeclare namespace IGCParser {\n  export interface Options {\n    lenient?: boolean;\n  }\n\n  export interface IGCFile {\n    /** UTC date of the flight in ISO 8601 format */\n    date: string;\n    numFlight: number | null;\n\n    pilot: string | null;\n    copilot: string | null;\n\n    gliderType: string | null;\n    registration: string | null;\n    callsign: string | null;\n    competitionClass: string | null;\n\n    loggerId: string | null;\n    loggerManufacturer: string;\n    loggerType: string | null;\n    firmwareVersion: string | null;\n    hardwareVersion: string | null;\n\n    task: Task | null;\n\n    fixes: BRecord[];\n    dataRecords: KRecord[];\n\n    security: string | null;\n\n    errors: Error[];\n  }\n\n  interface PartialIGCFile extends Partial<IGCFile> {\n    fixes: BRecord[];\n    dataRecords: KRecord[];\n  }\n\n  export interface ARecord {\n    manufacturer: string;\n    loggerId: string | null;\n    numFlight: number | null;\n    additionalData: string | null;\n  }\n\n  export interface BRecord {\n    /** Unix timestamp of the GPS fix in milliseconds */\n    timestamp: number;\n\n    /** UTC time of the GPS fix in ISO 8601 format */\n    time: string;\n\n    latitude: number;\n    longitude: number;\n    valid: boolean;\n    pressureAltitude: number | null;\n    gpsAltitude: number | null;\n\n    extensions: RecordExtensions;\n\n    fixAccuracy: number | null;\n\n    /** Engine Noise Level from 0.0 to 1.0 */\n    enl: number | null;\n  }\n\n  export interface KRecord {\n    /** Unix timestamp of the data record in milliseconds */\n    timestamp: number;\n\n    /** UTC time of the data record in ISO 8601 format */\n    time: string;\n\n    extensions: RecordExtensions;\n  }\n\n  export interface RecordExtensions {\n    [code: string]: string;\n  }\n\n  export interface RecordExtension {\n    code: string;\n    start: number;\n    length: number;\n  }\n\n  export interface Task {\n    declarationDate: string;\n    declarationTime: string;\n    declarationTimestamp: number;\n\n    flightDate: string | null;\n    taskNumber: number | null;\n\n    numTurnpoints: number;\n    comment: string | null;\n\n    points: TaskPoint[];\n  }\n\n  export interface TaskPoint {\n    latitude: number;\n    longitude: number;\n    name: string | null;\n  }\n}\n\nclass IGCParser {\n  private _result: IGCParser.PartialIGCFile = {\n    numFlight: null,\n    pilot: null,\n    copilot: null,\n    gliderType: null,\n    registration: null,\n    callsign: null,\n    competitionClass: null,\n    loggerType: null,\n    firmwareVersion: null,\n    hardwareVersion: null,\n    task: null,\n    fixes: [],\n    dataRecords: [],\n    security: null,\n    errors: [],\n  };\n\n  private fixExtensions: IGCParser.RecordExtension[] = [];\n  private dataExtensions: IGCParser.RecordExtension[] = [];\n\n  private lineNumber = 0;\n  private prevTimestamp: number | null = null;\n\n  static parse(str: string, options: IGCParser.Options = {}): IGCParser.IGCFile {\n    let parser = new IGCParser();\n\n    let errors = [];\n    for (let line of str.split('\\n')) {\n      try {\n        parser.processLine(line.trim());\n      } catch (error) {\n        if (options.lenient) {\n          errors.push(error);\n        } else {\n          throw error;\n        }\n      }\n    }\n\n    let result = parser.result;\n    result.errors = errors;\n\n    return result;\n  }\n\n  get result(): IGCParser.IGCFile {\n    if (!this._result.loggerManufacturer) {\n     // throw new Error(`Missing A record`);\n    }\n\n    if (!this._result.date) {\n      throw new Error(`Missing HFDTE record`);\n    }\n\n    return this._result as IGCParser.IGCFile;\n  }\n\n  private processLine(line: string) {\n    this.lineNumber += 1;\n\n    let recordType = line[0];\n\n    if (recordType === 'B') {\n      let fix = this.parseBRecord(line);\n\n      this.prevTimestamp = fix.timestamp;\n\n      this._result.fixes.push(fix);\n\n    } else if (recordType === 'K') {\n      let data = this.parseKRecord(line);\n\n      this.prevTimestamp = data.timestamp;\n\n      this._result.dataRecords.push(data);\n\n    } else if (recordType === 'H') {\n      this.processHeader(line);\n\n    } else if (recordType === 'C') {\n      this.processTaskLine(line);\n\n    } else if (recordType === 'A') {\n      let record = this.parseARecord(line);\n\n      this._result.loggerId = record.loggerId;\n      this._result.loggerManufacturer = record.manufacturer;\n\n      if (record.numFlight !== null) {\n        this._result.numFlight = record.numFlight;\n      }\n\n    } else if (recordType === 'I') {\n      this.fixExtensions = this.parseIJRecord(line);\n\n    } else if (recordType === 'J') {\n      this.dataExtensions = this.parseIJRecord(line);\n\n    } else if (recordType === 'G') {\n      this._result.security = (this._result.security || '') + line.slice(1);\n    }\n  }\n\n  private processHeader(line: string) {\n    let headerType = line.slice(2, 5);\n    if (headerType === 'DTE') {\n      let record = this.parseDateHeader(line);\n\n      this._result.date = record.date;\n\n      if (record.numFlight !== null) {\n        this._result.numFlight = record.numFlight;\n      }\n\n    } else if (headerType === 'PLT') {\n      this._result.pilot = this.parsePilot(line);\n    } else if (headerType === 'CM2') {\n      this._result.copilot = this.parseCopilot(line);\n    } else if (headerType === 'GTY') {\n      this._result.gliderType = this.parseGliderType(line);\n    } else if (headerType === 'GID') {\n      this._result.registration = this.parseRegistration(line);\n    } else if (headerType === 'CID') {\n      this._result.callsign = this.parseCallsign(line);\n    } else if (headerType === 'CCL') {\n      this._result.competitionClass = this.parseCompetitionClass(line);\n    } else if (headerType === 'FTY') {\n      this._result.loggerType = this.parseLoggerType(line);\n    } else if (headerType === 'RFW') {\n      this._result.firmwareVersion = this.parseFirmwareVersion(line);\n    } else if (headerType === 'RHW') {\n      this._result.hardwareVersion = this.parseHardwareVersion(line);\n    }\n  }\n\n  private parseARecord(line: string): IGCParser.ARecord {\n    let match = line.match(RE_A);\n    if (match) {\n      let manufacturer = \"\"; //lookupManufacturer(match[1]);\n      let loggerId = match[2];\n      let numFlight = match[3] ? parseInt(match[3], 10) : null;\n      let additionalData = match[4] || null;\n      return {manufacturer, loggerId, numFlight, additionalData};\n    }\n\n    match = line.match(/^A(\\w{3})(.+)?$/);\n    if (match) {\n      let manufacturer = \"\";// lookupManufacturer(match[1]);\n      let additionalData = match[2] ? match[2].trim() : null;\n      return { manufacturer, loggerId: null, numFlight: null, additionalData };\n    }\n\n    throw new Error(`Invalid A record at line ${this.lineNumber}: ${line}`);\n  }\n\n  private parseDateHeader(line: string): { date: string, numFlight: number | null } {\n    let match = line.match(RE_HFDTE);\n    if (!match) {\n      throw new Error(`Invalid DTE header at line ${this.lineNumber}: ${line}`);\n    }\n\n    let lastCentury = match[3][0] === '8' || match[3][0] === '9';\n    let date = `${lastCentury ? '19' : '20'}${match[3]}-${match[2]}-${match[1]}`;\n\n    let numFlight = match[4] ? parseInt(match[4], 10) : null;\n\n    return { date, numFlight };\n  }\n\n  private parseTextHeader(headerType: string, regex: RegExp, line: string, underscoreReplacement = ' '): string {\n    let match = line.match(regex);\n    if (!match) {\n      throw new Error(`Invalid ${headerType} header at line ${this.lineNumber}: ${line}`);\n    }\n\n    return (match[1] || match[2] || '').replace(/_/g, underscoreReplacement).trim();\n  }\n\n  private parsePilot(line: string): string {\n    return this.parseTextHeader('PLT', RE_PLT_HEADER, line);\n  }\n\n  private parseCopilot(line: string): string {\n    return this.parseTextHeader('CM2', RE_CM2_HEADER, line);\n  }\n\n  private parseGliderType(line: string): string {\n    return this.parseTextHeader('GTY', RE_GTY_HEADER, line);\n  }\n\n  private parseRegistration(line: string): string {\n    return this.parseTextHeader('GID', RE_GID_HEADER, line, '-');\n  }\n\n  private parseCallsign(line: string): string {\n    return this.parseTextHeader('GTY', RE_CID_HEADER, line);\n  }\n\n  private parseCompetitionClass(line: string): string {\n    return this.parseTextHeader('GID', RE_CCL_HEADER, line);\n  }\n\n  private parseLoggerType(line: string): string {\n    return this.parseTextHeader('FTY', RE_FTY_HEADER, line);\n  }\n\n  private parseFirmwareVersion(line: string): string {\n    return this.parseTextHeader('RFW', RE_RFW_HEADER, line);\n  }\n\n  private parseHardwareVersion(line: string): string {\n    return this.parseTextHeader('RHW', RE_RHW_HEADER, line);\n  }\n\n  private processTaskLine(line: string) {\n    if (!this._result.task) {\n      this._result.task = this.parseTask(line);\n    } else {\n      this._result.task.points.push(this.parseTaskPoint(line));\n    }\n  }\n\n  private parseTask(line: string): IGCParser.Task {\n    let match = line.match(RE_TASK);\n    if (!match) {\n      throw new Error(`Invalid task declaration at line ${this.lineNumber}: ${line}`);\n    }\n\n    let lastCentury = match[3][0] === '8' || match[3][0] === '9';\n    let declarationDate = `${lastCentury ? '19' : '20'}${match[3]}-${match[2]}-${match[1]}`;\n    let declarationTime = `${match[4]}:${match[5]}:${match[6]}`;\n    let declarationTimestamp = Date.parse(`${declarationDate}T${declarationTime}Z`);\n\n    let flightDate = null;\n    if (match[7] !== '00' || match[8] !== '00' || match[9] !== '00') {\n      lastCentury = match[9][0] === '8' || match[9][0] === '9';\n      flightDate = `${lastCentury ? '19' : '20'}${match[9]}-${match[8]}-${match[7]}`;\n    }\n\n    let taskNumber = (match[10] !== '0000') ? parseInt(match[10], 10) : null;\n    let numTurnpoints = parseInt(match[11], 10);\n    let comment = match[12] || null;\n\n    return {\n      declarationDate,\n      declarationTime,\n      declarationTimestamp,\n      flightDate,\n      taskNumber,\n      numTurnpoints,\n      comment,\n      points: [],\n    };\n  }\n\n  private parseTaskPoint(line: string): IGCParser.TaskPoint {\n    let match = line.match(RE_TASKPOINT);\n    if (!match) {\n      throw new Error(`Invalid task point declaration at line ${this.lineNumber}: ${line}`);\n    }\n\n    let latitude = IGCParser.parseLatitude(match[1], match[2], match[3], match[4]);\n    let longitude = IGCParser.parseLongitude(match[5], match[6], match[7], match[8]);\n    let name = match[9] || null;\n\n    return { latitude, longitude, name };\n  }\n\n  private parseBRecord(line: string): IGCParser.BRecord {\n    if (!this._result.date) {\n      throw new Error(`Missing HFDTE record before first B record`);\n    }\n\n    let match = line.match(RE_B);\n    if (!match) {\n      throw new Error(`Invalid B record at line ${this.lineNumber}: ${line}`);\n    }\n\n    let time = `${match[1]}:${match[2]}:${match[3]}`;\n    let timestamp = this.calcTimestamp(time);\n\n    let latitude = IGCParser.parseLatitude(match[4], match[5], match[6], match[7]);\n    let longitude = IGCParser.parseLongitude(match[8], match[9], match[10], match[11]);\n\n    let valid = match[12] === 'A';\n\n    let pressureAltitude = match[13] === '00000' ? null : parseInt(match[13], 10);\n    let gpsAltitude = match[14] === '00000' ? null : parseInt(match[14], 10);\n\n    let extensions: IGCParser.RecordExtensions = {};\n    if (this.fixExtensions) {\n      for (let { code, start, length } of this.fixExtensions) {\n        extensions[code] = line.slice(start, start + length);\n      }\n    }\n\n    let enl = null;\n    if (extensions['ENL']) {\n      let enlLength = this.fixExtensions.filter(it => it.code === 'ENL')[0].length;\n      let enlMax = Math.pow(10, enlLength);\n\n      enl = parseInt(extensions['ENL'], 10) / enlMax;\n    }\n\n    let fixAccuracy = extensions['FXA'] ? parseInt(extensions['FXA'], 10) : null;\n\n    return {\n      timestamp,\n      time,\n      latitude,\n      longitude,\n      valid,\n      pressureAltitude,\n      gpsAltitude,\n      extensions,\n      enl,\n      fixAccuracy,\n    };\n  }\n\n  private parseKRecord(line: string): IGCParser.KRecord {\n    if (!this._result.date) {\n      throw new Error(`Missing HFDTE record before first K record`);\n    }\n\n    if (!this.dataExtensions) {\n      throw new Error(`Missing J record before first K record`);\n    }\n\n    let match = line.match(RE_K);\n    if (!match) {\n      throw new Error(`Invalid K record at line ${this.lineNumber}: ${line}`);\n    }\n\n    let time = `${match[1]}:${match[2]}:${match[3]}`;\n    let timestamp = this.calcTimestamp(time);\n\n    let extensions: IGCParser.RecordExtensions = {};\n    if (this.dataExtensions) {\n      for (let { code, start, length } of this.dataExtensions) {\n        extensions[code] = line.slice(start, start + length);\n      }\n    }\n\n    return { timestamp, time, extensions };\n  }\n\n  private parseIJRecord(line: string): IGCParser.RecordExtension[] {\n    let match = line.match(RE_IJ);\n    if (!match) {\n      throw new Error(`Invalid ${line[0]} record at line ${this.lineNumber}: ${line}`);\n    }\n\n    let num = parseInt(match[1], 10);\n    if (line.length < 3 + num * 7) {\n      throw new Error(`Invalid ${line[0]} record at line ${this.lineNumber}: ${line}`);\n    }\n\n    let extensions = new Array<IGCParser.RecordExtension>(num);\n\n    for (let i = 0; i < num; i++) {\n      let offset = 3 + i * 7;\n      let start = parseInt(line.slice(offset, offset + 2), 10);\n      let end = parseInt(line.slice(offset + 2, offset + 4), 10);\n      let length = end - start + 1;\n      let code = line.slice(offset + 4, offset + 7);\n\n      extensions[i] = { start, length, code };\n    }\n\n    return extensions;\n  }\n\n  private static parseLatitude(dd: string, mm: string, mmm: string, ns: string): number {\n    let degrees = parseInt(dd, 10) + parseFloat(`${mm}.${mmm}`) / 60;\n    return (ns === 'S') ? -degrees : degrees;\n  }\n\n  private static parseLongitude(ddd: string, mm: string, mmm: string, ew: string): number {\n    let degrees = parseInt(ddd, 10) + parseFloat(`${mm}.${mmm}`) / 60;\n    return (ew === 'W') ? -degrees : degrees;\n  }\n\n  /**\n   * Figures out a Unix timestamp in milliseconds based on the\n   * date header value, the time field in the current record and\n   * the previous timestamp.\n   */\n  private calcTimestamp(time: string): number {\n    let timestamp = Date.parse(`${this._result.date}T${time}Z`);\n\n    // allow timestamps one hour before the previous timestamp,\n    // otherwise we assume the next day is meant\n    while (this.prevTimestamp && timestamp < this.prevTimestamp - ONE_HOUR) {\n      timestamp += ONE_DAY;\n    }\n\n    return timestamp;\n  }\n}\n\n//export = IGCParser;",
            "type": "external_code"
         },
         {
            "argument": ["location"],
            "name": "geoCode",
            "id": "2D4EA5D5-45AC-0AAB-499B-16CA76177BCC",
            "body": "console.group(\"geoCode\");\nlet siteName = this.findNearest(location); // Check if we have already mapped this lat/lon to a Sitename\nif ( siteName == null ) { // use reverseGeocoding to find sitename\n    if (this.platform.platforms().includes('cordova')) { \n    try {\n            const options: NativeGeocoderOptions = {useLocale: true, maxResults: 1};\n            const r = (await this.nativeGeocoder.reverseGeocode(location.latitude,location.longitude, options))[0];\n            //siteName = `${r.subLocality}, ${r.locality},${r.administrativeArea}`;\n            siteName = [r.subLocality, r.locality,r. subAdministrativeArea, r.administrativeArea, r.countryName].\n                        filter(e => e != \"\").\n                        join(\", \")\n        } catch (err) {\n            console.error(`Native geocoder failed , ${err}`)\n        }\n    } else {  \n        const key = \"AIzaSyCYlcQVLX2YuUYe_KnSDBPwVsIrTJ-B6lA\";\n        const type = \"neighborhood|colloquial_area|sublocality|locality|administrative_area_level_1|administrative_area_level_2|administrative_area_level_3|administrative_area_level_4|administrative_area_level_5\"\n        const restURL = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${location.latitude},${location.longitude}&result_type=${type}&key=${key}`\n    \n        const resp =  await fetch(restURL);\n        if (resp.ok) {\n            const r = await resp.json();\n            siteName = r.results[0].formatted_address;\n        } else {\n            console.error('API Geocoder Failed: ', resp);\n        }\n    }\n\n    this.geoCache.push({siteName: siteName, latLon:location});\n}\nconsole.groupEnd();\nreturn siteName;",
            "type": "async_method"
         },
         {
            "argument": [
               "igcString",
               "filename",
               "file"
            ],
            "name": "mapToLogEntry",
            "id": "A8FDFC6D-AF40-72DC-C6E9-9DC6814F08A8",
            "body": "console.group(\"IGC mapToLogEntry: \", filename);\nfunction toDuration(min:number):string {\n    return String(Math.floor(min/60)).padStart(2,'0') + \":\" + String(Math.floor(min%60)).padStart(2,'0') \n}\n\nconst igcData = this.getIGC(igcString, filename, file);\nconst start = igcData.fixes[0]; \nconst end = igcData.fixes[igcData.fixes.length-1];\nconst site = await this.geoCode(start);\n\nconst tzOffset = await this.getTimeOffset(start, start.timestamp); //offset in hrs\nconst siteDatetime = this.SiteDatetime(start.timestamp, tzOffset); //in site TZ\nconst climbRate = this.calcClimbRate(igcData.fixes)\nconst logEntry = { site: site,\n                    elevation: 0, //await this.elevation(start),\n                    date: siteDatetime.slice(0,10), //YYYY-mm-dd in site TZ\n                    time: siteDatetime.slice(11,16), //hh:mm no seconds in site TZ\n                    when: siteDatetime.slice(0,10) + \" \" + siteDatetime.slice(11,16),\n                    tzOffset: tzOffset, // tzOffset in hours\n                    duration: toDuration(this.toInterval(start, end)/60), // in hh:mm\n                    wing: igcData.gliderType,\n                    distance:this.round2(this.getDistanceFromLatLonInKm(start,end)),\n                    notes: \"\", \n                    maxAltitude:Math.max(...igcData.fixes.map(f => f.pressureAltitude)), // prefer preasure over GPS\n                    maxClimb: Math.max(...climbRate), \n                    maxSink:  Math.min(...climbRate),\n                    landing:\"Outland\", launch:\"Foot\", type: \"Solo\", \n                    hikeFly:false, comp: false, soar: false, thermal: false, reserve: false,\n                    IGC: igcData,\n                    _id:this.uuidv4(),\n                    _createdAt:new Date().toISOString(), \n                    _updatedAt:new Date().toISOString()\n                }\n\nconsole.groupEnd();\n\nreturn logEntry;",
            "type": "async_method"
         },
         {
            "argument": ["l"],
            "name": "findNearest",
            "id": "983F7D0D-C7C8-954B-2E7F-0516C39F97BB",
            "body": "//Search logs to see if we've already named this location\nif (this.geoCache == null || this.geoCache.length == 0){\n    return null\n} \nconst siteList =  this.geoCache.map(e => ({siteName:e.siteName, distance: this.getDistanceFromLatLonInKm(e.latLon,l)}));\n\nconst closest = (siteList.length == 1)? siteList[0] :\n                                        siteList.reduce((acc, curr) => (curr.distance < acc.distance) ? curr: acc);\n\nconst siteName = closest.distance < 0.1 ? closest.siteName: null; //with-in 100m\nreturn siteName",
            "type": "method"
         },
         {
            "argument": [
               "start",
               "end"
            ],
            "name": "getDistanceFromLatLonInKm",
            "id": "78080C59-DCE6-CADF-57F5-0C0EC65F8BE2",
            "body": "let deg2rad = (deg) => deg * (Math.PI/180);\n\nlet {latitude: lat1, longitude:lon1} = start;\nlet {latitude: lat2, longitude:lon2} = end;\n\nvar R = 6371; // Radius of the earth in km\nvar dLat = deg2rad(lat2-lat1);  // deg2rad below\nvar dLon = deg2rad(lon2-lon1); \nvar a =  Math.sin(dLat/2) * Math.sin(dLat/2) + \n         Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2); \nvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \nvar d = R * c; // Distance in km\nreturn d;",
            "type": "method"
         },
         {
            "argument": ["num"],
            "name": "round2",
            "id": "3EAA3015-965E-49D3-8491-B5B265866BB1",
            "body": "return Math.round((num + Number.EPSILON) * 100) / 100;",
            "type": "method"
         },
         {
            "argument": [
               "igcString",
               "filename",
               "fileobj"
            ],
            "name": "getIGC",
            "id": "96133125-C1AF-6657-FF39-029E2F825F03",
            "body": "const data = IGCParser.parse(igcString);\nconst validFixes = data.fixes.filter(f => f.valid);\n                  \nconst logRate = Math.round((validFixes[validFixes.length-1].timestamp - validFixes[0].timestamp)/1000/\n                           (validFixes.length-1)); //in seconds\n\nconst pctValidity = Math.round(100 - (data.fixes.length - validFixes.length)/data.fixes.length*100);\n\n\nconst obj = { filename:   filename,\n              file:       fileobj, //The File or Entry object for this\n              content:    \"\", //igcString, //Not sure its needed and slows the app on the device. \n              date:       data.date, // YYYY-mm-dd\n              gliderType: data.gliderType,\n              pctValid:   pctValidity,\n              logRate:    logRate,\n              fixes:      validFixes // m/s\n        };\nreturn obj",
            "type": "method"
         },
         {
            "argument": [
               "start",
               "end"
            ],
            "name": "toInterval",
            "id": "26142FF5-92DC-8460-3C76-13973060EAB2",
            "body": "//time in seconds\nreturn Math.round((end.timestamp - start.timestamp) / 1000); ",
            "type": "method"
         },
         {
            "argument": [],
            "name": "isCordova",
            "id": "BC9BB863-EA98-E0AC-C257-99EE66B51966",
            "body": "\nreturn this.platform.platforms().includes('cordova')",
            "type": "method"
         },
         {
            "argument": [
               "location",
               "timestamp"
            ],
            "name": "getTimeOffset",
            "id": "A7897FCE-F4B7-524F-3772-90B76B24F52B",
            "body": "// The time offest in min for this location and day, including DST\nconst key = \"AIzaSyCYlcQVLX2YuUYe_KnSDBPwVsIrTJ-B6lA\";\nconst URL = `https://maps.googleapis.com/maps/api/timezone/json?timestamp=${timestamp/1000}&location=${location.latitude},${location.longitude}&key=${key}`\nlet timeOffset=NaN;\nconst resp =  await fetch(URL);\nif (resp.ok) {\n    const r = await resp.json();\n    if (r.status == \"OK\"){\n        timeOffset = (r.dstOffset + r.rawOffset)/60/60; //in hours\n    } else {\n        console.error('JSON Error: ', status);\n    }\n} else {\n    console.error('API TZ Failed: ', resp);\n}\nreturn timeOffset;",
            "type": "async_method"
         },
         {
            "argument": ["fixes"],
            "name": "calcClimbRate",
            "id": "408FD2F9-1938-C33F-F3C5-4E889FD2767E",
            "body": "const logRate = Math.round((fixes[fixes.length-1].timestamp - fixes[0].timestamp )/1000/fixes.length); //in seconds\nconst step = Math.max(Math.round(this.settings.ratePeriod/logRate), 1);// # steps to average the climb rate\n\nfunction rate(start, end) {\n    return (end.pressureAltitude - start.pressureAltitude)/((end.timestamp - start.timestamp) / 1000); //m/sec\n}\n\nconst rates =  fixes.map((curr, idx, array) => (idx+step < array.length) ? this.round2(rate(curr, array[idx+step])): 0); \nreturn rates;",
            "type": "method"
         },
         {
            "argument": [
               "timestamp",
               "tzOffset"
            ],
            "name": "SiteDatetime",
            "id": "8BD2F3C1-3B1D-7440-0AE6-F8EA10FB2EC9",
            "body": "//create a datetime string in site TZ\ntry {\n    return new Date(timestamp + tzOffset*60*60*1000).toISOString()\n} catch {\n    console.error(\"SiteDatetime:\", timestamp, tzOffset);\n    return new Date(0).toISOString()\n}",
            "type": "method"
         },
         {
            "argument": ["location"],
            "name": "elevation",
            "id": "0222F877-48E6-EC8A-2CCF-EF11049246A3",
            "body": "//WARNING: Fetch fails to return despite URL working in browser!\n//lookup the elevation\nconsole.group(\"elevation\");\n\nconst key = \"AIzaSyCYlcQVLX2YuUYe_KnSDBPwVsIrTJ-B6lA\";\nconst restURL = `https://maps.googleapis.com/maps/api/elevation/json?locations=${location.latitude},${location.longitude}&key=${key}`\n\nconst resp =  await fetch(restURL);\nif (resp.ok) {\n    const r = await resp.json();\n    return r.results[0].elevation;\n} else {\n    console.error('API Elevation Failed: ', resp);\n    return 0;\n}\nconsole.groupEnd();",
            "type": "async_method"
         }
      ],
      "module": {"includes": ""},
      "variable": [
         {
            "addDI": false,
            "name": "logData",
            "id": "B0C06725-7236-44E9-936C-5CD69371D72A",
            "type": "ED753B4C-879E-38C0-5B80-F90906320235",
            "value": "[]"
         },
         {
            "addDI": false,
            "name": "settings",
            "id": "719E8224-A11E-F353-F0C8-8B492BFCBF42",
            "type": "41702D25-AC7B-01D4-B168-EA6A1E07A3F6",
            "value": "{units: {altitude: \"m\", distance: \"km\", climbRate: \"m/s\", wind: \"km/hr\", temp: \"°C\"}, name: \"\", unloggedLandings:0, unloggedHours:\"00:00\", ratePeriod:10}"
         },
         {
            "addDI": true,
            "name": "nativeGeocoder",
            "id": "04805AE3-1F03-8086-B392-0BF5D36DF745",
            "type": "B7D02720-095F-C5FA-F5DE-E47B085C217F",
            "value": ""
         },
         {
            "addDI": true,
            "name": "myFile",
            "id": "1BA1ECF1-5999-9C9F-71FA-B353D25434AB",
            "type": "DF5E8686-8E0D-AE2F-1B79-C0624AB6D061",
            "value": ""
         },
         {
            "addDI": true,
            "name": "pathConverter",
            "id": "3962DC9A-2A9F-9328-E284-B47287BB5D9E",
            "type": "29413D9E-4828-DCD9-A5D0-2BBBCD8E6032",
            "value": ""
         },
         {
            "addDI": false,
            "name": "geoCache",
            "id": "5D7EF2B0-1CEF-34F4-DD75-5147409AE286",
            "type": "ADB7DD8B-612F-6E85-DA32-0D74E1330AA3",
            "value": "[]"
         },
         {
            "addDI": false,
            "name": "showSpinner",
            "id": "5B8100EE-D5A9-9DF2-A4EE-F568EEAD60E4",
            "type": "ACB7DD8B-612F-6E85-DA32-0D74E1330AA2",
            "value": "false"
         },
         {
            "addDI": true,
            "name": "platform",
            "id": "748FD0B6-CFC5-764B-BBED-7913C9838B66",
            "type": "4E21F3C5-F88D-FF7E-651D-890586DC1E1C",
            "value": ""
         },
         {
            "addDI": false,
            "name": "progress",
            "id": "58D675B1-BB80-D9B1-C43F-8342BC74DDC8",
            "type": "ABB7DD8B-612F-6E85-DA32-0D74E1330AA1",
            "value": "0"
         },
         {
            "addDI": true,
            "name": "chooser",
            "id": "9F68054E-4E1E-47F9-175F-944A5FD0B71A",
            "type": "4D62DE04-9F37-8EB9-F861-B28DDA046752",
            "value": ""
         }
      ]
   },
   "children": {"bean": [
      {
         "children": {"bean": [
            {
               "children": {"bean": []},
               "@type": "Ionic5ButtonBean",
               "property": {
                  "ion4Routing": {
                     "route": "",
                     "routerDirection": "",
                     "params": ""
                  },
                  "strong": "false",
                  "color": "",
                  "shape": "",
                  "icon": {
                     "color": "",
                     "name": "",
                     "style": "none",
                     "className": "",
                     "slot": "",
                     "customIcon": "-1"
                  },
                  "className": "",
                  "slot": "",
                  "fill": "",
                  "aio_visible": "true",
                  "mode": "",
                  "advancedProperties": {
                     "*ngIf": "isCordova()",
                     "(click)": ""
                  },
                  "expand": "block",
                  "component": "ion-button",
                  "buttonType": "",
                  "size": "",
                  "ionMenuButton": {
                     "icon": "__default",
                     "autoHide": "",
                     "menu": "",
                     "customIcon": "-1",
                     "type": ""
                  },
                  "linkFeatures": {
                     "rel": "",
                     "href": "",
                     "type": "",
                     "target": ""
                  },
                  "disabled": "",
                  "text": "Select IGC files ",
                  "componentName": "AppUploadIGCFileButton",
                  "ionBackButton": {
                     "defaultHref": "",
                     "icon": "__default",
                     "text": "",
                     "customIcon": "-1",
                     "type": ""
                  },
                  "styleBorderColor": "",
                  "styleBorderRadius": {
                     "all": "",
                     "topLeft": "",
                     "topRight": "",
                     "bottomLeft": "",
                     "bottomRight": ""
                  },
                  "styleBorderStyle": "",
                  "styleBorderWidth": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleColor": "",
                  "styleMargin": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "visible": "true"
               },
               "@id": "F3E4CF95-3CAB-21FD-E3E2-440B4F583997",
               "events": {"click": {
                  "@id": "ClickEvent3712",
                  "@readOnly": "false",
                  "actions": {"customjs": {
                     "@readOnly": false,
                     "@index": 0,
                     "@id": "CustomJSAction37500",
                     "isActive": true,
                     "script": "//https://docs.appery.io/docs/ionic-4-file-upload-app-using-cordova-plugins#part-3-creating-app\nconsole.group(\"Native Simple File Chooser\");\nthis.showSpinner = true;\n\n//https://stackoverflow.com/questions/13729301/html5-file-api-how-to-see-the-result-of-readastext\nasync function readFile(entry, reader) {\n    return new Promise((resolve, reject) => {\n\n    reader.onload = (e) => {resolve(reader.result as string);}; \n    reader.onerror = (e) => {console.error(\"readFile: \", e); reject(e); } \n    \n    var win = function(file) {reader.readAsText(file);};\n    var fail = function(file) { console.error(\"Entry fail: \", file);};\n    entry.file(win, fail);\n    });\n}\n\ntry { \n    // use \"application/octet-stream\" for IGC file as igc not understood.\n    let fileList = (await this.chooser.getFile(\"application/octet-stream\")) as any;\n    \n    let log = [];\n    let counter = 0;\n    const reader = new FileReader() ; // Try using one reader for multiple files to fix GDrive locking issue.\n    for (const file of fileList) {\n        const entry = await this.myFile.resolveLocalFilesystemUrl(file.uri);\n        const contents = await readFile(entry, reader);\n        let logEntry = await this.mapToLogEntry(contents, file.name, entry); \n        log.push(logEntry);\n        counter ++;\n        this.progress = counter/fileList.length;\n    };\n    \n    this.logData = log;\n} catch (err) {\n    /* now fixed?\n    if (Array.isArray(err)) {\n         fileList = err; // The plug-in looks to be broken and return an error on sucess.\n    } else { \n    */\n\n        console.error(err);\n   // } \n}\n\nthis.showSpinner = false;\nconsole.groupEnd();"
                  }}
               }}
            },
            {
               "children": {"bean": []},
               "@type": "Ionic5InputBean",
               "property": {
                  "color": "",
                  "icon": {
                     "color": "",
                     "name": "",
                     "style": "none",
                     "className": "",
                     "slot": "",
                     "customIcon": "-1"
                  },
                  "className": "",
                  "slot": "",
                  "type": "file",
                  "required": "",
                  "mode": "",
                  "debounce": "",
                  "features": {
                     "minlength": "",
                     "clearInput": "",
                     "autocomplete": "",
                     "max": "",
                     "maxlength": "",
                     "multiple": "true",
                     "pattern": "",
                     "autofocus": "",
                     "autocapitalize": "",
                     "accept": "",
                     "autocorrect": "",
                     "min": "",
                     "clearOnEdit": "",
                     "size": "",
                     "spellcheck": "",
                     "step": ""
                  },
                  "ngModel": "",
                  "ion4Label": {
                     "mode": "",
                     "color": "",
                     "className": "",
                     "text": "Select IGC files ",
                     "position": "",
                     "slot": ""
                  },
                  "readonly": "",
                  "disabled": "",
                  "placeholder": "Enter text",
                  "componentName": "WebUploadIGCFileButton",
                  "ion4Reorder": {
                     "style": "__default",
                     "slot": "",
                     "customIcon": "-1",
                     "reorderType": ""
                  },
                  "value": "",
                  "formCtrlOptions": {
                     "standalone": "false",
                     "updateOn": ""
                  },
                  "inputmode": "",
                  "angularID": "",
                  "aio_visible": "true",
                  "advancedProperties": {
                     "(ionInput)": "",
                     "*ngIf": "! isCordova()",
                     "(ionChange)": "",
                     "[(ngModel)]": "",
                     "(ionFocus)": "",
                     "accept": ".igc"
                  },
                  "name": "Input1",
                  "formCtrlDivider": "",
                  "ion4Item": {
                     "mode": "",
                     "color": "",
                     "disabled": "",
                     "className": "",
                     "slot": "",
                     "lines": ""
                  },
                  "showItemWrapper": "true",
                  "enterkeyhint": "",
                  "validation": {
                     "showErrors": "false",
                     "className": "",
                     "required": "",
                     "requiredmessage": "",
                     "min": "",
                     "minmessage": "",
                     "max": "",
                     "maxmessage": "",
                     "minlength": "",
                     "minlengthmessage": "",
                     "maxlength": "",
                     "maxlengthmessage": "",
                     "pattern": "",
                     "patternmessage": ""
                  },
                  "stylePadding": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleMargin": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleBackgroundColor": "",
                  "visible": "true"
               },
               "@id": "F7E78D65-F480-4978-AEC2-F7B45C08CEFE",
               "events": {"ionChange": {
                  "@id": "",
                  "@readOnly": "false",
                  "actions": {"customjs": {
                     "@readOnly": false,
                     "@index": 0,
                     "@id": "CustomJSAction19564",
                     "isActive": true,
                     "script": "//Select a file, load CSV and convert from parajournal format\n//See if we can overcome android/drive read probelms.\nconsole.group(\"ChooseIGCFileButton: Change\");\nthis.showSpinner = true;\nconst fileList = event.target.children[0].files;\n\nasync function readFile(file, reader) {\n    return new Promise((resolve, reject) => {\n    \n    reader.onload = (e) => {resolve(reader.result as string);}; \n    reader.onerror = (e) => {console.error(reader.error); reject(\"\"); } \n    \n    reader.readAsText(file);\n    });\n}\n\nlet log = [];\nlet counter = 0;\nconst reader = new FileReader(); // Try using one reader for multiple files to fix GDrive locking issue.\nfor (const file of fileList) {\n    const contents = await readFile(file, reader);\n    let logEntry = await this.mapToLogEntry(contents, file.name, file); \n    log.push(logEntry);\n    counter ++;\n    this.progress = counter/fileList.length;\n};\n\nthis.logData = log;\nthis.showSpinner = false;\nconsole.groupEnd();"
                  }}
               }}
            },
            {
               "children": {"bean": []},
               "@type": "Ionic5ButtonBean",
               "property": {
                  "ion4Routing": {
                     "route": "",
                     "routerDirection": "",
                     "params": ""
                  },
                  "strong": "false",
                  "color": "tertiary",
                  "shape": "",
                  "icon": {
                     "color": "",
                     "name": "",
                     "style": "none",
                     "className": "",
                     "slot": "",
                     "customIcon": "-1"
                  },
                  "className": "",
                  "slot": "",
                  "fill": "",
                  "aio_visible": "true",
                  "mode": "",
                  "advancedProperties": {
                     "(click)": "",
                     "[hidden]": "logData.length == 0"
                  },
                  "expand": "block",
                  "component": "ion-button",
                  "buttonType": "",
                  "size": "",
                  "ionMenuButton": {
                     "icon": "__default",
                     "autoHide": "",
                     "menu": "",
                     "customIcon": "-1",
                     "type": ""
                  },
                  "linkFeatures": {
                     "rel": "",
                     "href": "",
                     "type": "",
                     "target": ""
                  },
                  "disabled": "false",
                  "text": "Add Flights",
                  "componentName": "AddFlightsButton",
                  "ionBackButton": {
                     "defaultHref": "",
                     "icon": "__default",
                     "text": "",
                     "customIcon": "-1",
                     "type": ""
                  },
                  "styleBorderColor": "",
                  "styleBorderRadius": {
                     "all": "",
                     "topLeft": "",
                     "topRight": "",
                     "bottomLeft": "",
                     "bottomRight": ""
                  },
                  "styleBorderStyle": "",
                  "styleBorderWidth": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleColor": "",
                  "styleMargin": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "visible": "true"
               },
               "@id": "DF066B7A-DC0B-4D32-823C-703A129BF00C",
               "events": {"click": {
                  "@id": "",
                  "@readOnly": "false",
                  "actions": {"customjs": {
                     "@readOnly": false,
                     "@index": 0,
                     "@id": "CustomJSAction25906",
                     "isActive": true,
                     "script": "//Wite the imported IGC flights to storage\nconsole.group(\"Click - Add Flights\");\nconst alert = await this.Apperyio.getController(\"AlertController\").create({\n    header: \"Confirm append?\",\n    message: \"This will append these flights to your existing logged flights.\",\n    buttons: [{\n        text: 'Cancel',\n        role: 'cancel',\n        cssClass: 'secondary',\n    }, {\n        text: 'Confirm',\n        handler: async (res) => {\n            console.debug(\"Add confirmed\");\n            console.time('Load LogStorage');\n            //let logTable = await this.Apperyio.data.getStorage(\"LogStorage\"); \n            let logTable = await this.Apperyio.data.getVariable(\"LogStorage\"); \n            console.timeEnd('Load LogStorage');\n            logTable = (logTable == null) ? [] : logTable; \n            logTable.push(...this.logData);\n            console.time('Save LogStorage');\n            await this.Apperyio.data.setStorage(\"LogStorage\", logTable);\n            await this.Apperyio.data.setVariable(\"LogStorage\", logTable);\n            console.timeEnd('Save LogStorage');\n            this.logData = [];\n            this.Apperyio.navigateTo(\"Home\");\n        }\n    }]\n});\n\nawait alert.present();\nconsole.groupEnd();"
                  }}
               }}
            },
            {
               "children": {"bean": [
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "100",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "site",
                        "name": "Site",
                        "width": "200",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "Site",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "A0331EC9-ED39-5965-A22D-346BCCF47BE1",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "when",
                        "name": "When",
                        "width": "115",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "Date",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "DE082ED2-9640-AC1F-2EF8-71706CFD6EEA",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "duration",
                        "name": "Duration",
                        "width": "60",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "Duration_copy",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "42CF2269-AC43-BB24-B9DC-F959D4F4D2E5",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "distance",
                        "name": "Distance",
                        "width": "65",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "Distance_copy",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "9EAECF54-2070-33CA-E596-E210FF0396F9",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "maxAltitude",
                        "name": "Alt",
                        "width": "55",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "MaxAltitude",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "D3D4B5AF-3E9E-5CB0-43EE-0EC9BE692E51",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "maxClimb",
                        "name": "Climb",
                        "width": "55",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "MaxClimb",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "B904A388-7F2E-4BC8-C1A2-8D06B740972D",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "false",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "maxSink",
                        "name": "Sink",
                        "width": "55",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "MaxSink",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "E4EA240A-72DF-846D-8E25-5A712B4812EE",
                     "events": ""
                  },
                  {
                     "children": {"bean": []},
                     "@type": "Ionic5DataTableColBean",
                     "property": {
                        "cellTemplate": "{{value}}",
                        "checkboxable": "",
                        "flexGrow": "",
                        "cellTemplate_postfix": "",
                        "frozenLeft": "",
                        "cellTemplate_prefix": "",
                        "canAutoResize": "true",
                        "minWidth": "",
                        "cellClass": "",
                        "sortable": "true",
                        "headerCheckboxable": "",
                        "headerClass": "",
                        "aio_visible": "",
                        "frozenRight": "",
                        "headerTemplate_postfix": "",
                        "draggable": "true",
                        "prop": "IGC.filename",
                        "name": "File",
                        "width": "",
                        "headerTemplate_prefix": "",
                        "resizeable": "true",
                        "componentName": "DataTableCol16",
                        "headerTemplate": "",
                        "maxWidth": ""
                     },
                     "@id": "343A1493-AD8F-984D-7337-7EADF511B276",
                     "events": ""
                  }
               ]},
               "@type": "Ionic5DataTableBean",
               "property": {
                  "cssClasses": {
                     "sortDescending": "",
                     "pagerRightArrow": "",
                     "sortAscending": "",
                     "pagerLeftArrow": "",
                     "pagerPrevious": "",
                     "pagerNext": ""
                  },
                  "scrollbarV": "false",
                  "className": "",
                  "tableHeight": "height-100-header-footer",
                  "displayCheck": "",
                  "selectionType": "single",
                  "reorderable": "false",
                  "limit": "",
                  "theme": "bootstrap",
                  "componentName": "IGCTrackDataTable",
                  "scrollbarH": "false",
                  "sorts": {
                     "prop": "when",
                     "dir": "desc"
                  },
                  "rowHeight": "40",
                  "externalSorting": "false",
                  "columnMode": "",
                  "footerHeight": "false",
                  "offset": "",
                  "count": "",
                  "rows": "B0C06725-7236-44E9-936C-5CD69371D72A",
                  "aio_visible": "true",
                  "advancedProperties": {"*ngIf": "logData.length > 0"},
                  "dataMode": {
                     "mode": "clientInfinite",
                     "serviceName": ""
                  },
                  "rowClass": "",
                  "messages": {
                     "emptyMessage": "Click on the plus icon to add your first flight",
                     "totalMessage": "",
                     "selectedMessage": ""
                  },
                  "headerHeight": "40",
                  "visible": "true"
               },
               "@id": "1B670302-54FD-5A54-F3DC-B35FD8C6AD97",
               "events": ""
            },
            {
               "children": {"bean": [{
                  "children": {"bean": [
                     {
                        "children": {"bean": []},
                        "@type": "Ionic5CardItemTitleBean",
                        "property": {
                           "mode": "",
                           "color": "dark",
                           "className": "",
                           "wrapper": "ion-card-title",
                           "text": "How to use",
                           "componentName": "CardItemTitle3",
                           "aio_visible": "true"
                        },
                        "@id": "3892C66B-68DD-7ED2-0326-C784B62C83CE",
                        "events": ""
                     },
                     {
                        "children": {"bean": []},
                        "@type": "Ionic5HtmlBean",
                        "property": {
                           "container": "div",
                           "html_prefix": "",
                           "wrapperStyle": {
                              "backgroundColor": "",
                              "display": "default",
                              "width": "",
                              "style": "",
                              "height": ""
                           },
                           "className": "",
                           "html": "%children%\nThis page imports flights from your IGC tracklogs.\n<ul>\n  <li>Click \"Choose file\" and select one or more IGC files.<\/li>\n  <li>You will then see the the IGC flights in a table.<\/li>\n  <li>Click the \"X\" at the top of the screen to cancel and return to the home page.<\/li>\n  <li>Click the \"Add Flights\" button and then confim the action to add these flights to your log. <\/li>\n<\/ul>\nNote: If you first want to remove all the existing flights, go to settings and use the Delete flights buttons.",
                           "slot": "",
                           "componentName": "Html1",
                           "aio_visible": "true",
                           "html_postfix": "\nThis page imports flights from your IGC tracklogs.\n<ul>\n  <li>Click \"Choose file\" and select one or more IGC files.<\/li>\n  <li>You will then see the the IGC flights in a table.<\/li>\n  <li>Click the \"X\" at the top of the screen to cancel and return to the home page.<\/li>\n  <li>Click the \"Add Flights\" button and then confim the action to add these flights to your log. <\/li>\n<\/ul>\nNote: If you first want to remove all the existing flights, go to settings and use the Delete flights buttons.",
                           "styleColor": "",
                           "styleBackgroundColor": "",
                           "styleBorderColor": "",
                           "styleBorderRadius": {
                              "all": "",
                              "topLeft": "",
                              "topRight": "",
                              "bottomLeft": "",
                              "bottomRight": ""
                           },
                           "styleBorderStyle": "",
                           "styleBorderWidth": {
                              "all": "",
                              "top": "",
                              "right": "",
                              "bottom": "",
                              "left": ""
                           },
                           "styleDisplay": "",
                           "styleFontSize": "",
                           "styleFontStyle": "",
                           "styleFontWeight": "",
                           "styleHeight": "",
                           "styleLineHeight": "",
                           "styleMargin": {
                              "all": "",
                              "top": "",
                              "right": "",
                              "bottom": "",
                              "left": ""
                           },
                           "styleMaxWidth": "",
                           "styleMaxHeight": "",
                           "styleMinHeight": "",
                           "styleMinWidth": "",
                           "styleOpacity": "",
                           "stylePadding": {
                              "all": "",
                              "top": "",
                              "right": "",
                              "bottom": "",
                              "left": ""
                           },
                           "stylePosition": {
                              "type": "",
                              "top": "",
                              "right": "",
                              "bottom": "",
                              "left": ""
                           },
                           "styleTextAlign": "",
                           "styleTextDecoration": "",
                           "styleVerticalAlign": "",
                           "styleWidth": "",
                           "visible": "true"
                        },
                        "@id": "7B14CCAA-84C7-C9C9-A765-9DA76FDECD5A",
                        "events": ""
                     }
                  ]},
                  "@type": "Ionic5CardItemBean",
                  "property": {
                     "mode": "",
                     "translucent": "false",
                     "color": "",
                     "className": "",
                     "wrapper": "ion-card-content",
                     "text": "Item text",
                     "componentName": "CardItem3",
                     "aio_visible": "true",
                     "visible": "true"
                  },
                  "@id": "81205BF1-ACEA-3141-5D47-83E86BD419DB",
                  "events": ""
               }]},
               "@type": "Ionic5CardBean",
               "property": {
                  "mode": "",
                  "ion4Routing": {
                     "route": "",
                     "routerDirection": "",
                     "params": ""
                  },
                  "advancedProperties": {"[hidden]": "logData.length > 0"},
                  "isButton": "false",
                  "color": "",
                  "linkFeatures": {
                     "rel": "",
                     "href": "",
                     "type": "",
                     "target": ""
                  },
                  "className": "",
                  "disabled": "",
                  "slot": "",
                  "componentName": "HowToUseCard",
                  "aio_visible": "true",
                  "visible": "true"
               },
               "@id": "00F4E76B-6E0B-4464-7758-FD9A31C39171",
               "events": ""
            },
            {
               "children": {"bean": []},
               "@type": "Ionic5HtmlBean",
               "property": {
                  "container": "div",
                  "html_prefix": "",
                  "advancedProperties": {"*ngIf": "this.showSpinner"},
                  "wrapperStyle": {
                     "backgroundColor": "",
                     "display": "default",
                     "width": "",
                     "style": "",
                     "height": ""
                  },
                  "className": "",
                  "html": "%children%\n<ion-progress-bar color=\"primary\" value={{progress}}><\/ion-progress-bar>",
                  "slot": "",
                  "componentName": "Html2",
                  "aio_visible": "true",
                  "html_postfix": "\n<ion-progress-bar color=\"primary\" value={{progress}}><\/ion-progress-bar>",
                  "styleColor": "",
                  "styleBackgroundColor": "",
                  "styleBorderColor": "",
                  "styleBorderRadius": {
                     "all": "",
                     "topLeft": "",
                     "topRight": "",
                     "bottomLeft": "",
                     "bottomRight": ""
                  },
                  "styleBorderStyle": "",
                  "styleBorderWidth": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleDisplay": "",
                  "styleFontSize": "",
                  "styleFontStyle": "",
                  "styleFontWeight": "",
                  "styleHeight": "",
                  "styleLineHeight": "",
                  "styleMargin": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleMaxWidth": "",
                  "styleMaxHeight": "",
                  "styleMinHeight": "",
                  "styleMinWidth": "",
                  "styleOpacity": "",
                  "stylePadding": {
                     "all": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "stylePosition": {
                     "type": "",
                     "top": "",
                     "right": "",
                     "bottom": "",
                     "left": ""
                  },
                  "styleTextAlign": "",
                  "styleTextDecoration": "",
                  "styleVerticalAlign": "",
                  "styleWidth": "",
                  "visible": "true"
               },
               "@id": "CAC2FDF1-D91F-11A5-5E7E-B11B8F1D2787",
               "events": ""
            },
            {
               "children": {"bean": []},
               "@type": "Ionic5SpinnerBean",
               "property": {
                  "duration": "",
                  "advancedProperties": {"*ngIf": "this.showSpinner"},
                  "paused": "",
                  "color": "primary",
                  "name": "lines",
                  "className": "spinner",
                  "slot": "",
                  "componentName": "Spinner1",
                  "aio_visible": "true",
                  "visible": "true"
               },
               "@id": "EDEF0EDD-9BEC-4D3A-162E-5B5A8ADC5D28",
               "events": ""
            }
         ]},
         "@type": "Ionic5ContentBean",
         "property": {
            "advancedProperties": {"(ionScroll)": ""},
            "color": "",
            "fullscreen": "false",
            "forceOverscroll": "",
            "scrollY": "",
            "className": "",
            "availableSlots": {
               "": "Not selected",
               "fixed": "Fixed"
            },
            "componentName": "Content1",
            "scrollEvents": "",
            "scrollX": "",
            "stylePadding": {
               "all": "",
               "top": "",
               "right": "",
               "bottom": "",
               "left": ""
            },
            "styleTextAlign": "",
            "": ""
         },
         "@id": "A63E7C95-08C4-452B-8D2E-9A176C8091FE",
         "events": ""
      },
      {
         "children": {"bean": [{
            "children": {"bean": [
               {
                  "children": {"bean": [{
                     "children": {"bean": []},
                     "@type": "Ionic5ButtonBean",
                     "property": {
                        "ion4Routing": {
                           "route": "",
                           "routerDirection": "",
                           "params": ""
                        },
                        "strong": "false",
                        "color": "",
                        "shape": "",
                        "icon": {
                           "color": "",
                           "name": "",
                           "style": "none",
                           "className": "",
                           "slot": "",
                           "customIcon": "-1"
                        },
                        "className": "",
                        "slot": "",
                        "fill": "",
                        "aio_visible": "true",
                        "mode": "",
                        "advancedProperties": {"(click)": ""},
                        "expand": "block",
                        "component": "ion-back-button",
                        "buttonType": "",
                        "size": "",
                        "ionMenuButton": {
                           "icon": "__default",
                           "autoHide": "",
                           "menu": "",
                           "customIcon": "-1",
                           "type": ""
                        },
                        "linkFeatures": {
                           "rel": "",
                           "href": "",
                           "type": "",
                           "target": ""
                        },
                        "disabled": "",
                        "text": "Button",
                        "componentName": "Button3",
                        "ionBackButton": {
                           "defaultHref": "tabs",
                           "icon": "close",
                           "text": "",
                           "customIcon": "-1",
                           "type": ""
                        },
                        "styleBorderColor": "",
                        "styleBorderRadius": {
                           "all": "",
                           "topLeft": "",
                           "topRight": "",
                           "bottomLeft": "",
                           "bottomRight": ""
                        },
                        "styleBorderStyle": "",
                        "styleBorderWidth": {
                           "all": "",
                           "top": "",
                           "right": "",
                           "bottom": "",
                           "left": ""
                        },
                        "styleColor": "",
                        "styleMargin": {
                           "all": "",
                           "top": "",
                           "right": "",
                           "bottom": "",
                           "left": ""
                        },
                        "visible": "true"
                     },
                     "@id": "FD4F591C-EF27-43C4-8F02-D8430E4AAAC7",
                     "events": ""
                  }]},
                  "@type": "Ionic5ToolbarButtonsBean",
                  "property": {
                     "className": "",
                     "slot": "start",
                     "componentName": "ToolbarButtons1",
                     "aio_visible": "true",
                     "collapse": "true"
                  },
                  "@id": "A267AA3E-B82D-4CF7-8DAD-6DA343D4AEA1",
                  "events": ""
               },
               {
                  "children": {"bean": []},
                  "@type": "Ionic5ToolbarTitleBean",
                  "property": {
                     "color": "primary",
                     "className": "",
                     "text": "Import IGC tracks",
                     "componentName": "Import",
                     "aio_visible": "true",
                     "size": ""
                  },
                  "@id": "6229EE3F-C3A2-4EA4-B0E9-CA9A3AA3CE04",
                  "events": ""
               }
            ]},
            "@type": "Ionic5ToolbarBean",
            "property": {
               "mode": "",
               "isTitle": "true",
               "color": "",
               "className": "",
               "availableSlots": {
                  "": "Not selected",
                  "secondary": "Secondary",
                  "start": "Start",
                  "end": "End",
                  "primary": "Primary"
               },
               "slot": "",
               "componentName": "Toolbar1",
               "aio_visible": "true",
               "visible": "true"
            },
            "@id": "EA9CCD96-82DB-4D04-912A-A59604893F1F",
            "events": ""
         }]},
         "@type": "Ionic5HeaderBean",
         "property": {
            "mode": "",
            "translucent": "false",
            "className": "",
            "noBorder": "false",
            "componentName": "Header1",
            "aio_visible": "true"
         },
         "@id": "DD5191D0-6859-4034-9EEC-B256B0DB30A6",
         "events": ""
      }
   ]},
   "@type": "MobileScreenBean",
   "property": {
      "isTabs": "false",
      "platformMode": "md",
      "showHeader": "true",
      "theme": "",
      "componentName": "Page",
      "showFooter": "false",
      "isModal": "false"
   },
   "@id": "797A9721-6733-437C-BE3D-ECB8113C6FD8",
   "events": {"ionViewWillEnter": {
      "@id": "",
      "@readOnly": "false",
      "actions": {"customjs": {
         "@readOnly": false,
         "@index": 0,
         "@id": "CustomJSAction22564",
         "isActive": true,
         "script": "console.group(\"Before page showing: Import IGC tracks\");\n//this.settings  = await this.Apperyio.data.getStorage(\"SettingsStorage\");\n//const logTable = await this.Apperyio.data.getStorage(\"LogStorage\");\nthis.settings  = await this.Apperyio.data.getVariable(\"SettingsStorage\");\nconst logTable = await this.Apperyio.data.getVariable(\"LogStorage\");\n\nthis.geoCache  = logTable.filter(e => e.IGC !=null).\n                    map( e => ({siteName:e.site, latLon:e.IGC.fixes[0]}));\nconsole.groupEnd();"
      }}
   }}
}}